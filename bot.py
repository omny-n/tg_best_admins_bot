import logging
import os

import states
import exceptions

from aiogram import Bot, executor, types
from aiogram.dispatcher import Dispatcher, filters
from aiogram.utils.markdown import bold, code, text
from aiogram.types import ParseMode
from middlewares import AccessMiddleware

# Configure logging
logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)
logger.error("Starting bot")

if not os.getenv("TELEGRAM_API_TOKEN"):
    exit("Error: no token provided. Terminated.")


bot = Bot(token=os.getenv("TELEGRAM_API_TOKEN"))
dp = Dispatcher(bot)
dp.middleware.setup(AccessMiddleware(access_id=os.getenv("ACCESS_ID")))


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    cat_list = states.get_categories_list()
    content = text(
        text('–ü—Ä–∏–≤–µ—Ç,', bold(message.from_user.username), ', —è –±–æ—Ç —á–∞—Ç–∞ –ª—É—á—à–∏—Ö –∞–¥–º–∏–Ω–æ–≤\.', 
        '–ü–æ–∫–∞ —è —É–º–µ—é –Ω–µ —Ç–∞–∫ –º–Ω–æ–≥–æ, –Ω–æ —É–∂–µ –º–æ–≥—É –Ω–µ–ø–ª–æ—Ö–æ –æ–±–ª–µ–≥—á–∏—Ç—å –∂–∏–∑–Ω—å –≤—Å–µ–º—É —á–∞—Ç—É\.'),
        '',
        text('–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏, –∏—Ö –Ω–µ —Ç–∞–∫ –º–Ω–æ–≥–æ,', 
        '–¥–∞ –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Ö –Ω–∞–∑–≤–∞—Ç—å –º–æ–∂–Ω–æ —Å –Ω–∞—Ç—è–∂–∫–æ–π, –Ω–æ –æ–Ω–∏ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã –∏ –±–µ–∑ –Ω–∏—Ö —Ç—É—Ç –≤—Å–µ —Å–ª–æ–º–∞–µ—Ç—Å—è\.',
        '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π\: /rules\.'),
        '',
        text('–ö–æ–≥–¥–∞ –Ω–∞—Å–º–æ—Ç—Ä–∏—à—å—Å—è, –¥–æ–±–∞–≤—å —Å–≤–æ–π –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É, –∏–ª–∏ –∫–∞–Ω–∞–ª—ã, —Å–∫–æ–ª—å–∫–æ –∏—Ö —Ç–∞–º —É —Ç–µ–±—è\.',
        '–°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π:'),
        '',
        code('/add @–∫–∞–Ω–∞–ª –∫–æ–¥_–∫–æ—Ç–µ–≥–æ—Ä–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–µ(50 –¥–æ —Å–∏–º–≤–æ–ª–æ–≤)'),
        '',
        text('–ö –ø—Ä–∏–º–µ—Ä—É: ', code('/add @durov 3 –ö–∞–Ω–∞–ª –ü–∞–≤–ª–∞ –î—É—Ä–æ–≤–∞')),
        '',
        text('–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å, –∞ –≤–æ—Ç –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–∏–∫–∞–∫, –ø–æ—Ç–æ–º —á—Ç–æ\-–Ω–∏–±—É–¥—å –ø—Ä–∏–¥—É–º–∞–µ–º\.',
        '–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:'),
        '',
        code(f'{cat_list}'),
        '',
        text('–ü–æ–∑–∂–µ —É –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∞ –ø–æ–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–¥–æ —Ç–æ–ª–∫–∞—Ç—å @Omny\_N'),
        '',
        text('–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Ç–≤–æ–π –∫–∞–Ω–∞–ª –≤ –±–∞–∑–µ, –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /my\_channels, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ —á–∞—Ç—É\.'),
        '',
        text('–ê –µ—â–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /channels –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∏ —è –ø–æ–∫–∞–∂—É –∫–∞–Ω–∞–ª—ã —Ç–æ–≥–æ, –∫–æ–º—É —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª\.'),
        '',
        text('–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏ –∏—Ö –∫–∞–Ω–∞–ª–æ–≤, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /list\. '
        '–í —Å–ø–∏—Å–∫–µ —Ç—ã —É–≤–∏–¥–µ—à—å ID –∫–∞–Ω–∞–ª–∞, —é–∑–µ—Ä–Ω–µ–π–º –∞–¥–º–∏–Ω–∞ –∏ –µ–≥–æ –∫–∞–Ω–∞–ª, –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–±–∏—Ç –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\. '
        '–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /del ID¬†–∫–∞–Ω–∞–ª–∞, —É–¥–∞–ª—è—Ç—å –ø–æ–∫–∞ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞\.'),
        '', 
        text('–ê –µ—â–µ —è —É–º–µ—é –∏—Å–∫–∞—Ç—å –∫–∞–Ω–∞–ª—ã –≤ –±–∞–∑–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /search, –∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Ç–æ —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏\.'),
        '',
        text('–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —è —Å–º–æ–≥—É –µ—â–µ –±–æ–ª—å—à–µ\. :\)'),
        sep='\n')
    await message.reply(content, disable_notification=True, parse_mode=ParseMode.MARKDOWN_V2)

@dp.message_handler(commands=['rules'])
async def rules(message: types.Message):
    answer_message = text('–ü—Ä–∞–≤–∏–ª–∞:', 
        '1\. –•–æ—á–µ—à—å –ø–æ–∑–≤–∞—Ç—å –≤ –∫–æ–Ω—Ñ—É –∫—Ä—É—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞? –°–¥–µ–ª–∞–π –≥–æ–ª–æ—Å–æ–≤–∞–ª–∫—É –∑–∞ –∏–Ω–≤–∞–π—Ç —Å –µ–≥–æ –ª–æ–≥–∏–Ω–æ–º –∏ —é–∑–µ—Ä—ã –∫–æ–Ω—Ñ—ã –æ–ø—Ä–µ–¥–µ–ª—è—Ç —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å —ç—Ç–æ–π –∑–∞—Ç–µ–∏ üë∫',
        '2\. –ß–∞—Å —Ç–æ–ø–∞ –∏ –Ω–µ —É–¥–∞–ª—è—Ç—å –∏–∑ –ª–µ–Ω—Ç—ã —ç—Ç–æ –æ—Å–Ω–æ–≤–æ–ø–æ–ª–∞–≥–∞—é—â–∏–µ —Å—Ç–æ–ª–ø—ã –Ω–∞—à–µ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞\. ' 
        '–û–Ω–∏ –ø—Ä–∏–Ω—è—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\. –ï—Å–ª–∏ –≤–∞–º —ç—Ç–æ –ù–ï –ø–æ–¥—Ö–æ–¥–∏—Ç —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –ö–ê–ñ–î–´–ô —Ä–∞–∑ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ —Å—Ä–∞—á–∞ –∏ –≥–∞—á–∏',
        '¬©Ô∏è Ivan',
        sep='\n')
    await message.reply(answer_message, disable_notification=True, parse_mode=ParseMode.MARKDOWN_V2)


@dp.message_handler(commands=['list'])
async def get_admins_list(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∏—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    answer_message = states.get_admins_list()
    await message.answer(answer_message, disable_notification=True)


@dp.message_handler(commands=['channels'])
async def get_admins_channels(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–ø–ª–∞—è, –ª–∏–±–æ –∫–∞–Ω–∞–ª—ã
    –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–ø–ª–∞–π"""
    if message.reply_to_message:
        tg_id = message.reply_to_message.from_user.id
    else:
        tg_id = message.from_user.id
    answer_message = states.get_admins_channels(tg_id)
    await message.reply(answer_message)


@dp.message_handler(commands=['my_channels'])
async def get_my_channels(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã"""
    tg_id = message.from_user.id
    answer_message = states.get_admins_channels(tg_id)
    await message.reply(answer_message)


@dp.message_handler(filters.Text(startswith="/add "))
async def add_channels(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª—ã –≤ –±–∞–∑—É, –ø–∞—Ä—Å—è —Ä–µ–≥—É–ª—è—Ä–∫—É –≤–∏–¥–∞:
        /add @channel_name 1 –æ–ø–∏—Å–∞–Ω–∏–µ
        –≥–¥–µ 1 ‚Äî –∞–π–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    try:
        raw_message = states.add_admins_channels(
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name,
            message.text
            )
    except (exceptions.NotCorrectMessage) as e:
        await message.reply(str(e))
        return
    await message.reply(text(raw_message), parse_mode=ParseMode.MARKDOWN_V2)


@dp.message_handler(filters.Text(startswith='/del '), is_chat_admin=True)
async def delete_channels(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ –±–∞–∑—ã –ø–æ –∞–π–¥–∏"""
    try:
        answer = states.delete_admins_channel(message.text)
    except (exceptions.NotCorrectMessage) as e:
        await message.reply(str(e))
        return
    await message.answer(answer)


@dp.message_handler(filters.Text(startswith='/search '))
async def search_channels(message: types.Message):
    """–ò—â–µ—Ç –∫–∞–Ω–∞–ª—ã –≤ –±–∞–∑–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ –≤–∏–¥–∞: /channels –∫–∞–Ω–∞–ª"""
    try:
        answer = states.search_channel(message.text)
    except (exceptions.NotCorrectMessage) as e:
        await message.reply(str(e))
        return
    await message.reply(answer)    

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)